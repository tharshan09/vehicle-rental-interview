I want you to create a small fullstack interview exercise using:

- Frontend: React + TypeScript + Vite
- Backend: FastAPI (Python)
- Use a simple in-memory data store (no database required)
- Keep styling minimal (no CSS frameworks needed)
- Generate realistic but small project structure with multiple files

The domain context is a rental company that rents vehicles (cars, vans, trucks) to customers.

The goal is to have a clear code structure that is suitable for a code-review session.

The application should support:

ENTITY MODELS
--------------
Customer:
- id (number)
- name (string)
- email (string)

Vehicle:
- id (number)
- type (string)
- status (one of: "available" | "rented" | "maintenance")

Rental (Booking):
- id (number)
- customerId (number)
- vehicleId (number)
- startDate (string)
- endDate (string)

BACKEND REQUIREMENTS
--------------------
FastAPI endpoints:
GET /customers -> list all customers
GET /vehicles -> list all vehicles
GET /rentals -> list all rentals
POST /rentals -> create a new rental if the vehicle is "available"
PATCH /vehicles/{id}/maintenance -> switch vehicle to "maintenance"

Use Pydantic models and type hints.

Store data in simple Python lists for now.

Return proper error messages if:
- a rental is attempted when the vehicle is not available
- IDs donâ€™t exist

Frontend REQUIREMENTS
---------------------
React pages/components:
- CustomerList.tsx
- VehicleList.tsx
- RentalList.tsx
- CreateRentalForm.tsx

Display lists in tables.
Allow creating a rental using a form.

Use fetch or Axios to call the backend.

Show error messages returned from backend (alert is fine).

CODE STRUCTURE
--------------
Organize Frontend components in separate files.
Use React hooks.
Keep logic readable.

OUTPUT FORMAT
-------------
Please generate:
- Backend folder with FastAPI code
- Frontend folder with Vite React TypeScript code
- Basic instructions how to run both servers

Do NOT add artificial bugs yet. It should be clean and correct for now.

After you generate the full project, I will ask you to introduce realistic bugs for code-review.